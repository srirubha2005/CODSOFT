#include <iostream>

char board[3][3] = {{' ', ' ', ' '}, {' ', ' ', ' '}, {' ', ' ', ' '}};
char currentPlayer = 'X';

void displayBoard() {
    std::cout << "-------------" << std::endl;
    for (int i = 0; i < 3; i++) {
        std::cout << "| ";
        for (int j = 0; j < 3; j++) {
            std::cout << board[i][j] << " | ";
        }
        std::cout << std::endl;
        std::cout << "-------------" << std::endl;
    }
}

bool checkWin() {
    // Check rows and columns
    for (int i = 0; i < 3; i++) {
        if (board[i][0] == board[i][1] && board[i][1] == board[i][2] && board[i][0] != ' ') {
            return true; // Row-wise win
        }
        if (board[0][i] == board[1][i] && board[1][i] == board[2][i] && board[0][i] != ' ') {
            return true; // Column-wise win
        }
    }
    // Check diagonals
    if (board[0][0] == board[1][1] && board[1][1] == board[2][2] && board[0][0] != ' ') {
        return true; // Diagonal from top-left to bottom-right
    }
    if (board[0][2] == board[1][1] && board[1][1] == board[2][0] && board[0][2] != ' ') {
        return true; // Diagonal from top-right to bottom-left
    }
    return false;
}

bool checkDraw() {
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            if (board[i][j] == ' ') {
                return false; // There is an empty cell, game is not a draw yet
            }
        }
    }
    return true; // All cells are filled, game is a draw
}

void switchPlayer() {
    currentPlayer = (currentPlayer == 'X') ? 'O' : 'X';
}

int main() {
    std::cout << "Welcome to Tic-Tac-Toe!" << std::endl;
    while (true) {
        displayBoard();
        std::cout << "Player " << currentPlayer << "'s turn. Enter row and column (1-3): ";
        int row, col;
        std::cin >> row >> col;
        row--; // Adjusting for 0-based index
        col--;

        if (row < 0 || row >= 3 || col < 0 || col >= 3 || board[row][col] != ' ') {
            std::cout << "Invalid move! Try again." << std::endl;
            continue;
        }

        board[row][col] = currentPlayer;

        if (checkWin()) {
            displayBoard();
            std::cout << "Player " << currentPlayer << " wins!" << std::endl;
            break;
        } else if (checkDraw()) {
            displayBoard();
            std::cout << "It's a draw!" << std::endl;
            break;
        }

        switchPlayer();
    }

    char playAgain;
    std::cout << "Do you want to play again? (Y/N): ";
    std::cin >> playAgain;
    if (playAgain == 'Y' || playAgain == 'y') {
        // Reset the board and start a new game
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                board[i][j] = ' ';
            }
        }
        currentPlayer = 'X';
        main(); // Restart the game
    } else {
        std::cout << "Thank you for playing Tic-Tac-Toe!" << std::endl;
    }

    return 0;
}
